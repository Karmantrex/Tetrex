/**
 * Collect rows where Resolved date is AFTER Due Date
 * and write them to a new sheet named "1x SLA".
 * 
 * Looks for headers:
 *   - "Due Date" (or "Due")
 *   - "Resolved" (or "Resolution date")
 * Matching is case-insensitive.
 */
function build1xSLA() {
  const DEST_SHEET_NAME = "1x SLA";

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const src = ss.getActiveSheet();

  const lastRow = src.getLastRow();
  const lastCol = src.getLastColumn();
  if (lastRow < 2) return; // nothing to process

  // Find header columns (case-insensitive)
  const headers = src.getRange(1, 1, 1, lastCol).getDisplayValues()[0];
  const hLower  = headers.map(h => (h || '').trim().toLowerCase());

  const dueCol = hLower.findIndex(h =>
      h === "due date" || h === "due") + 1;
  const resolvedCol = hLower.findIndex(h =>
      h === "resolved" || h === "resolution date") + 1;

  if (!dueCol || !resolvedCol) {
    throw new Error('Could not find "Due Date"/"Due" and/or "Resolved"/"Resolution date" headers.');
  }

  // Read all data rows
  const data = src.getRange(2, 1, lastRow - 1, lastCol).getValues();

  // Filter rows where Resolved > Due
  const slaRows = [];
  for (let r = 0; r < data.length; r++) {
    const row = data[r];
    const due      = toDate_(row[dueCol - 1]);
    const resolved = toDate_(row[resolvedCol - 1]);

    if (due && resolved && resolved.getTime() > due.getTime()) {
      slaRows.push(row);
    }
  }

  // Create/clear destination and write results
  const dest = getOrCreateAndClear_(ss, DEST_SHEET_NAME);
  dest.getRange(1, 1, 1, lastCol).setValues([headers]);
  dest.setFrozenRows(1);
  if (slaRows.length) {
    dest.getRange(2, 1, slaRows.length, lastCol).setValues(slaRows);
  }
}

/* ===== Helpers ===== */

function toDate_(v) {
  if (v instanceof Date && !isNaN(v)) return v;

  if (typeof v === 'number') {
    // Excel/Sheets serial number -> JS Date
    const ms = (v - 25569) * 24 * 60 * 60 * 1000;
    const d = new Date(ms);
    return isNaN(d) ? null : d;
  }

  if (typeof v === 'string') {
    const s = v.trim();
    if (!s) return null;
    const d = new Date(s);
    return isNaN(d) ? null : d;
  }

  return null;
}

function getOrCreateAndClear_(ss, name) {
  let sh = ss.getSheetByName(name);
  if (!sh) sh = ss.insertSheet(name);
  else sh.clear();
  return sh;
}
