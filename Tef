function sortToNewTabByQID() {
  // CHANGE THIS to your exact source tab name
  const SOURCE_TAB = '';
  const TARGET_TAB = 'Sorted_By_QID';

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const src = ss.getSheetByName(SOURCE_TAB);
  if (!src) throw new Error(`Source tab not found: ${SOURCE_TAB}`);

  const values = src.getDataRange().getValues();
  if (values.length < 2) throw new Error('No data to sort');

  // Find the QID column by header name, case-insensitive, trims spaces
  const header = values[0].map(h => String(h).trim());
  const qidIndex0 = header.findIndex(h => h.toLowerCase() === 'qid'); // 0-based
  if (qidIndex0 === -1) throw new Error('QID column not found in header row');

  // Recreate target
  let tgt = ss.getSheetByName(TARGET_TAB);
  if (tgt) ss.deleteSheet(tgt);
  tgt = ss.insertSheet(TARGET_TAB);

  // Paste everything
  tgt.getRange(1, 1, values.length, values[0].length).setValues(values);
  tgt.setFrozenRows(1);

  // Now sort on the target using Google Sheets native sort
  // data range excludes the header row
  const lastRow = tgt.getLastRow();
  const lastCol = tgt.getLastColumn();
  if (lastRow > 1) {
    const dataRange = tgt.getRange(2, 1, lastRow - 1, lastCol);
    // qidIndex0 is 0-based relative to the sheet. Range.sort needs 1-based index relative to the range.
    const qidColRelative = qidIndex0 + 1;
    dataRange.sort([{ column: qidColRelative, ascending: true }]);
  }

  // Optional: add a filter so you can slice and dice
  tgt.getDataRange().createFilter();
  SpreadsheetApp.flush();
}
