/**
 * Build a "1x SLA miss" sheet from the active sheet.
 * Condition: DUE_FINDINGS > DUE_FINDINGS_REMEDIATED
 * - Detects headers case-insensitively and tolerates spaces/underscores.
 * - Copies full rows (all columns) for matches.
 */
function buildOneXSLAFromFindings() {
  const DEST_NAME = "1x SLA miss";

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const src = ss.getActiveSheet();

  const lastRow = src.getLastRow();
  const lastCol = src.getLastColumn();
  if (lastRow < 2) return; // nothing to process

  // Read header row
  const headers = src.getRange(1, 1, 1, lastCol).getDisplayValues()[0];

  // Normalize helper: lower, remove spaces/underscores/slashes
  const norm = s => String(s || "")
    .toLowerCase()
    .replace(/[\s_\/]+/g, "");

  // Find the two columns we need
  const hNorm = headers.map(norm);

  // Accept common header variants
  const dueIdx = hNorm.findIndex(h =>
    h === "duefindings" || h === "duefinding" || h === "due_vulnerabilities"
  );
  const remIdx = hNorm.findIndex(h =>
    h === "duefindingsremediated" || h === "duefindingsfixed" || h === "duefixedremediated"
  );

  if (dueIdx === -1 || remIdx === -1) {
    throw new Error('Could not find "DUE FINDINGS" and/or "DUE FINDINGS REMEDIATED" columns (case-insensitive).');
  }

  const dueCol = dueIdx + 1;
  const remCol = remIdx + 1;

  // Read all data rows
  const data = src.getRange(2, 1, lastRow - 1, lastCol).getDisplayValues();

  // Collect rows where DUE_FINDINGS > DUE_FINDINGS_REMEDIATED
  const matches = [];
  for (let r = 0; r < data.length; r++) {
    const row = data[r];
    const due = toNumber_(row[dueCol - 1]);
    const rem = toNumber_(row[remCol - 1]);

    if (isFinite(due) && isFinite(rem) && due > rem) {
      matches.push(row);
    }
  }

  // Create/Clear destination and write output
  const dest = getOrCreateAndClear_(ss, DEST_NAME);
  dest.getRange(1, 1, 1, lastCol).setValues([headers]);
  dest.setFrozenRows(1);

  if (matches.length) {
    dest.getRange(2, 1, matches.length, lastCol).setValues(matches);
  }
}

/* ===== Helpers ===== */

// Coerce a value (string like "1,234", number, blank) to a Number; blanks -> 0
function toNumber_(v) {
  if (typeof v === "number") return v;
  if (v == null) return 0;
  const s = String(v).trim();
  if (!s) return 0;
  const n = Number(s.replace(/,/g, ""));
  return isNaN(n) ? 0 : n;
}

function getOrCreateAndClear_(ss, name) {
  let sh = ss.getSheetByName(name);
  if (!sh) sh = ss.insertSheet(name);
  else sh.clear();
  return sh;
}
