function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('Rollups')
    .addItem('Build QID rollup', 'buildQidRollup')
    .addToUi();
}

function buildQidRollup() {
  const ss = SpreadsheetApp.getActive();
  const sourceName = 'Raw';          // change if your sheet name differs
  const targetName = 'QID_Rollup';

  const keepHeaders = ['QID','','COMPONENT','','','','KB_VULN_TITLE'];

  const src = ss.getSheetByName(sourceName);
  if (!src) throw new Error('Source sheet "Raw" not found');

  const data = src.getDataRange().getValues();
  if (data.length < 2) throw new Error('No data rows found');

  // Map column names to indexes
  const header = data[0].map(h => String(h).trim());
  const idx = {};
  keepHeaders.forEach(h => {
    const i = header.indexOf(h);
    if (i === -1) throw new Error(`Missing required column: ${h}`);
    idx[h] = i;
  });

  // Build unique rows keyed by QID + TEAM + COMPONENT
  const seen = new Map();
  for (let r = 1; r < data.length; r++) {
    const row = data[r];

    const qid   = String(row[idx['QID']]).trim();
    const team  = String(row[idx['TEAM']]).trim();
    const comp  = String(row[idx['COMPONENT']]).trim();

    // Skip empty QID or TEAM or COMPONENT if you want only actionable items
    if (!qid || !team || !comp) continue;

    const key = [qid, team, comp].join('||');

    // Only keep the first encounter for this QID+TEAM+COMPONENT
    if (!seen.has(key)) {
      seen.set(key, [
        row[idx['QID']],
        row[idx['']],
        row[idx['']],
        row[idx['']],
        row[idx['']],
        row[idx['']],
        row[idx['']]
      ]);
    }
  }

  // Sort by TEAM, then COMPONENT, then QID, then DUE_DATE
  const out = Array.from(seen.values()).sort((a, b) => {
    const teamCmp = String(a[3]).localeCompare(String(b[3]));
    if (teamCmp !== 0) return teamCmp;
    const compCmp = String(a[2]).localeCompare(String(b[2]));
    if (compCmp !== 0) return compCmp;
    const qidCmp = String(a[0]).localeCompare(String(b[0]));
    if (qidCmp !== 0) return qidCmp;
    // DUE_DATE is index 5
    return new Date(a[5]) - new Date(b[5]);
  });

  // Write to target sheet
  let tgt = ss.getSheetByName(targetName);
  if (!tgt) tgt = ss.insertSheet(targetName); else tgt.clear();

  tgt.getRange(1, 1, 1, keepHeaders.length).setValues([keepHeaders]);
  if (out.length > 0) {
    tgt.getRange(2, 1, out.length, keepHeaders.length).setValues(out);
  }

  // Freeze header and add filters
  tgt.setFrozenRows(1);
  tgt.getDataRange().createFilter();

  SpreadsheetApp.getActive().toast(`QID rollup built with ${out.length} rows`);
}
